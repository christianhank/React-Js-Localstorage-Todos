{"version":3,"sources":["loeschen.png","pruefen.png","todo.js","main_screen.js","welcome_screen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","className","complete","titel","inhalt","onClick","remove","all","map","item","id","completed","src","Check","arr1","test","filter","el","check","Delete","Main","localStorage","getItem","setItem","init","JSON","parse","useState","todos","setTodos","heading","setHeading","body","setBody","useEffect","newArray","stringify","hours","Date","getHours","zahl","onSubmit","event","preventDefault","type","onChange","e","currentTarget","value","placeholder","name","title","content","length","todo","key","removeItem","lift","Welcome","input","setInput","href","login","App","loggedIn","setLoggedIn","randomNumber","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,iPCwC5BC,MAnCf,SAAcC,GAqBV,OACI,yBAAKC,UAAU,qDACX,yBAAKA,UAAU,uBACX,wBAAIA,UAAS,UAAKD,EAAME,SAAW,OAAS,KAAOF,EAAMG,OACjD,uBAAGF,UAAS,eAAUD,EAAME,SAAW,OAAS,KAAOF,EAAMI,SAEzE,yBAAKH,UAAU,qGACX,yBAAKA,UAAU,GAAGI,QAlBjB,WACVL,EAAMM,OAAON,EAAMO,IAAIC,KAAI,SAAAC,GACvB,OAAGA,EAAKC,KAAOV,EAAMU,GACV,2BACHD,GADJ,IACUE,WAAYF,EAAKE,YAGxBF,QAW+B,yBAAKR,UAAU,QAAQW,IAAKC,OAC7D,yBAAKZ,UAAU,GAAGI,QAAS,kBAzBzB,WACV,IAAMS,EAAOd,EAAMO,IACbG,EAAKV,EAAMU,GACbK,EAAOD,EAAKE,QAAO,SAACC,GAAD,OAAQA,EAAGP,KAAOA,KACzCV,EAAMM,OAAOS,GAqB4BG,KAAS,yBAAKjB,UAAU,QAASW,IAAKO,UCkFxEC,MAhHf,SAAcpB,GAE2B,KAAlCqB,aAAaC,QAAQ,UACpBD,aAAaE,QAAQ,QAAQ,MAEjC,IAAIC,EAAOC,KAAKC,MAAML,aAAaC,QAAQ,UAL3B,EAOSK,mBAASH,GAPlB,mBAOTI,EAPS,KAOHC,EAPG,OAQaF,mBAAS,IARtB,mBAQTG,EARS,KAQDC,EARC,OASOJ,mBAAS,IAThB,mBASTK,EATS,KASJC,EATI,KAiDhBC,qBAAU,WACF,IAAIC,EAAWP,EACfP,aAAaE,QAAQ,QAAQE,KAAKW,UAAUD,OAE/C,IAEGE,GADQ,IAAIC,MACCC,WAuBrB,OACI,yBAAKtC,UAAU,uBACX,4BA3Be,CAAC,eAAe,MAAM,cAAc,eAM9CoC,EAAQ,GAAKA,EAAQ,GACd,EAEPA,EAAQ,IAAMA,GAAS,GACjB,EAEPA,EAAQ,IAAMA,GAAS,GAChB,EAEPA,GAAS,GAAKA,GAAS,EAChB,OADX,GAYA,KAAgChB,aAAaC,QAAQ,SACrD,wBAAIrB,UAAU,aAPL,CAAC,sBAAsB,kDAA+C,4BAA4B,oDAAiD,uCAO3HD,EAAMwC,OACvC,yBAAKvC,UAAU,QAIf,yBAAKA,UAAU,YACX,0BAAMA,UAAU,WAAWwC,SAAU,SAACC,GAAD,OAAWA,EAAMC,mBAClD,2BAAO1C,UAAU,yBAAyB2C,KAAK,OAAOC,SAhD9C,SAACC,GAAD,MAAO,CAC3Bf,EAAWe,EAAEC,cAAcC,SA+CkEC,YAAY,iBAAcD,MAAOlB,EAASoB,KAAK,mBAChI,2BAAOjD,UAAU,yBAAyB2C,KAAK,OAAOC,SA7CjD,SAACC,GAAD,MAAO,CACxBb,EAAQa,EAAEC,cAAcC,SA4CkEC,YAAY,SAASD,MAAOhB,EAAMkB,KAAK,WACrH,4BAAQjD,UAAU,0BAA0BI,QAAS,kBAvEpD8C,EAuEkErB,OArEjE,MAFKsB,EAuEoEpB,IArEzD,KAAVmB,IAChBtB,EAAS,GAAD,mBAAKD,GAAL,CAAY,CACpBlB,GAAIkB,EAAMyB,OACTF,MAAOA,EACPC,QAASA,EACTzC,WAAU,MAEdoB,EAAW,IACXE,EAAQ,MAVG,IAACkB,EAAMC,IAuEP,yBAMP,yBAAKnD,UAAU,QAAQ2B,EAAMpB,KAAI,SAAA8C,GAAI,OAErC,kBAAC,EAAD,CAAMhD,OAAQuB,EAAUnB,GAAI4C,EAAK5C,GAAIR,SAAUoD,EAAK3C,UAAY4C,IAAKD,EAAK5C,GAAIH,IAAKqB,EAAOzB,MAAOmD,EAAKH,MAAQ/C,OAAQkD,EAAKF,cAK3H,yBAAKnD,UAAU,YACZ,4BAAQA,UAAU,uBAAuBI,QAAS,kBA3F1DgB,aAAamC,WAAW,QACxBnC,aAAaE,QAAQ,QAAQ,SAC7BvB,EAAMyD,MAAK,KAyFH,YACA,4BAAQxD,UAAU,uBAAuBI,QAAS,WApE1DwB,EAAS,MAoED,uB,MClED6B,MArCf,SAAiB1D,GAAQ,IAAD,EAEG2B,mBAAS,IAFZ,mBAEfgC,EAFe,KAETC,EAFS,KAmBtB,OAVAvC,aAAaE,QAAQ,QAAQ,IAW3B,yBAAKtB,UAAU,qBACb,wBAAIA,UAAU,gBAAd,kCACA,wBAAIA,UAAU,kCAAd,6BAAyE,8CAAzE,gLACA,4BAAI,uBAAG4D,KAAK,6BAAR,sCACJ,0BAAMpB,SAAU,SAAAK,GAAOA,EAAEH,mBAEvB,yBAAM1C,UAAU,iCACd,2BAAO2C,KAAK,OAAO3C,UAAU,mCAAmC4C,SAtBvD,SAACC,GAChBc,EAASd,EAAEC,cAAcC,QAqBiEE,KAAK,SACzF,2BAAON,KAAK,SAAS3C,UAAU,2BAA2BI,QAAS,WAjBvD,IAAC6C,EACN,MADMA,EAiBwES,KAfzFtC,aAAaE,QAAQ,OAAO2B,GAC5BlD,EAAM8D,OAAM,KAcqFd,MAAM,WCS9Fe,MArCf,WAEE,IAFa,EAUkBpC,oBARb,WAChB,OAAoC,MAAhCN,aAAaC,QAAQ,WAHd,mBAUN0C,EAVM,KAUGC,EAVH,KAeb,IAAiB,IAAbD,EACF,OACE,6BAEA,kBAAC,EAAD,CAASF,MAAOG,KAOlB,IAAIC,EAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UACjC,OACF,yBAAKpE,UAAU,OACb,kBAAC,EAAD,CAAMiD,KAAM7B,aAAaC,QAAQ,QAASkB,KAAM0B,EAAcT,KAAMQ,MCvBtDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e7e5245f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loeschen.837c7aa4.png\";","module.exports = __webpack_public_path__ + \"static/media/pruefen.e418339f.png\";","import React, {useEffect, useState} from 'react';\r\nimport \"./main.css\"\r\nimport Delete from \"./loeschen.png\"\r\nimport Check from \"./pruefen.png\"\r\n\r\nfunction Todo(props){\r\n\r\n    var klasse = \"done\";\r\n\r\n    const check = () => {\r\n        const arr1 = props.all\r\n        const id = props.id\r\n        var test = arr1.filter((el) => el.id !== id)\r\n        props.remove(test)  \r\n    }\r\n    const line = () => {\r\n       props.remove(props.all.map(item => {\r\n           if(item.id === props.id){    \r\n               return {\r\n                ...item, completed: !item.completed\r\n               }\r\n           }\r\n           return item;\r\n       }))\r\n    }\r\n\r\n    return(\r\n        <div className=\"row todo-main border todo my-3 shadow-sm bg-white\">\r\n            <div className=\"col-md-10 pl-4 py-3\">\r\n                <h4 className={`${props.complete ? 'done' : ''}`}>{props.titel}</h4>\r\n                        <p className={`mb-0 ${props.complete ? 'done' : ''}`}>{props.inhalt}</p>\r\n            </div>\r\n            <div className=\"col-md-2 todo-buttons todo d-flex bg-light border-left  justify-content-around align-items-center\">\r\n                <div className=\"\" onClick={line}><img className=\"icons\" src={Check}/></div>\r\n                <div className=\"\" onClick={() => check()}><img className=\"icons\"  src={Delete}/></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, {useEffect, useState} from 'react';\r\nimport Todo from \"./todo\";\r\nimport \"./main.css\"\r\n\r\nfunction Main(props){\r\n\r\n    if(localStorage.getItem(\"todos\") === \"\"){\r\n        localStorage.setItem(\"todos\",\"[]\")\r\n    }\r\n    var init = JSON.parse(localStorage.getItem(\"todos\"))\r\n    \r\n    const [todos,setTodos] = useState(init);\r\n    const [heading,setHeading] = useState(\"\")\r\n    const [body,setBody] = useState(\"\")\r\n    \r\n\r\n    const abmelden = () =>{\r\n        localStorage.removeItem(\"name\")\r\n        localStorage.setItem(\"todos\",\"\")\r\n        props.lift(false)\r\n    }\r\n\r\n    \r\n    const addTodo = (title,content) => {\r\n       \r\n       if(content !== \"\" || title !== \"\"){\r\n            setTodos([...todos, {\r\n            id: todos.length,\r\n             title: title,\r\n             content: content,\r\n             completed:false,\r\n         }]); \r\n         setHeading(\"\")\r\n         setBody(\"\")  \r\n       } else {\r\n\r\n       }\r\n        \r\n    }\r\n\r\n    const clearAll = () => {\r\n        setTodos([])\r\n    }\r\n\r\n    const onChangeHeading = (e) => [\r\n        setHeading(e.currentTarget.value)\r\n    ]\r\n\r\n    const onChangeBody = (e) => [\r\n        setBody(e.currentTarget.value)\r\n    ]\r\n    \r\n\r\n    useEffect(() =>{\r\n            var newArray = todos;\r\n            localStorage.setItem(\"todos\",JSON.stringify(newArray)) \r\n         })\r\n         var begruessung = [\"Guten Morgen\",\"Hey\",\"Guten Abend\",\"Ab ins Bett\"];\r\n         var time = new Date();\r\n        var hours = time.getHours();\r\n        \r\n\r\n         var textBegr = () => {\r\n             if (hours > 5 && hours < 12){\r\n                 return 0;\r\n             }\r\n             if (hours > 11 && hours <= 17){\r\n                return 1;\r\n            }\r\n            if (hours > 17 && hours <= 23){\r\n                return 2;\r\n            }\r\n            if (hours >= 0 && hours <= 5){\r\n                return 3;\r\n            }\r\n         }\r\n         \r\n         \r\n         var texte = [\"Was steht heute an?\",\"Hoffe du hattest bisher einen schönen Tag :)\",\"Struktur ist das A und O!\",\"Traue eher deiner Todo Liste als deinem Glück.\",\"Lieber Arm ab als arm dran... oder?\"]\r\n         \r\n\r\n\r\n    return(\r\n        <div className=\"main container py-5\">\r\n            <h1>{begruessung[textBegr()]}, {localStorage.getItem(\"name\")}</h1>\r\n            <h2 className=\"text-dark\">{texte[props.zahl]}</h2>\r\n            <div className=\"row\">\r\n            \r\n            \r\n            </div>\r\n            <div className=\"row my-4\">\r\n                <form className=\"formular\" onSubmit={(event) => event.preventDefault()} >\r\n                    <input className=\"input p-2  text-center\" type=\"text\" onChange={onChangeHeading} placeholder=\"Überschrift\" value={heading} name=\"Überschrift\" />\r\n                    <input className=\"input p-2  text-center\" type=\"text\" onChange={onChangeBody} placeholder=\"Inhalt\" value={body} name=\"Inhalt\" />\r\n                    <button className=\"btn btn-warning  addBtn\" onClick={() => addTodo(heading,body)}>Notiz hinzufügen</button>\r\n                </form>\r\n            \r\n            </div>\r\n            \r\n            \r\n             <div className=\"my-4\">{todos.map(todo => (\r\n                 \r\n             <Todo remove={setTodos} id={todo.id} complete={todo.completed}  key={todo.id} all={todos} titel={todo.title}  inhalt={todo.content}/>\r\n             ))}\r\n            \r\n             </div>\r\n\r\n             <div className=\"row pb-5\">\r\n                <button className=\"btn btn-warning mx-2\" onClick={() => abmelden()}>Abmelden</button>\r\n                <button className=\"btn btn-warning mx-2\" onClick={() => clearAll()}>Alles löschen</button> \r\n             </div>\r\n             \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, { useState } from \"react\";\r\nimport './welcome.css';\r\n\r\n// check if name exists\r\n// get name from input, check if empty\r\n// on press submit, change statee\r\nfunction Welcome(props) {\r\n\r\n  const [input,setInput] = useState(\"\");\r\n\r\n\r\n  const onChange = (e) => { // nimmt den input\r\n    setInput(e.currentTarget.value);\r\n  }\r\n\r\n  localStorage.setItem(\"todos\",\"\")\r\n\r\n  const formHandler = (name) => {\r\n    if (name !== \"\"){\r\n      localStorage.setItem(\"name\",name);\r\n      props.login(true);\r\n    }\r\n   \r\n  }\r\n\r\n  return (\r\n    <div className=\"welcome container\">\r\n      <h1 className=\"text-center \">Willkommen, wie ist dein Name?</h1>\r\n      <h5 className=\"text-center text-dark infoText\">Deine Aufgaben werden bei <strong>Local ToDo</strong> lokal in deinem Browser gespeichert. Keine Anmeldung & keine Registrierung notwendig, dein Name reicht(selbst den bräuchte man nicht, macht das Ganze aber freundlicher)</h5>\r\n      <h6><a href=\"https://github.com/s0pht/\">eine React App von Christian Hank</a></h6>\r\n      <form onSubmit={e => { e.preventDefault(); }}>\r\n      \r\n        <div  className=\"mt-4 row rounded inputWelcome\">\r\n          <input type=\"text\" className=\"input rounded border-0 shadow-lg\" onChange={onChange} name=\"name\" />\r\n          <input type=\"button\" className=\"btn btn-warning goButton\" onClick={() => formHandler(input)} value=\"Go\" />\r\n        </div>\r\n        \r\n    </form>\r\n    </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default Welcome;\r\n","import React, {useState} from 'react';\r\n\r\nimport './App.css';\r\nimport Main from \"./main_screen\";\r\nimport Welcome from \"./welcome_screen\"\r\n\r\nfunction App() {\r\n\r\n  const checkName = () => {\r\n    if (localStorage.getItem(\"name\") == null){\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  const [loggedIn,setLoggedIn] = useState(checkName);\r\n  \r\n\r\n  // ab hier beginnt der eigentliche code\r\n\r\n  if (loggedIn === false){\r\n    return (\r\n      <div>\r\n\r\n      <Welcome login={setLoggedIn}  />\r\n    </div>\r\n      \r\n    ) \r\n    \r\n  }else {\r\n    \r\n    var randomNumber = Math.floor(Math.random() * 5);\r\n      return (\r\n    <div className=\"App\">\r\n      <Main name={localStorage.getItem(\"name\")} zahl={randomNumber} lift={setLoggedIn}/> \r\n    </div>\r\n  );\r\n    }\r\n\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}